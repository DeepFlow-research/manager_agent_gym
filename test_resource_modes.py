import re\nimport pandas as pd\nimport numpy as np\n\ndef evaluate(resources):\n    try:\n        mds = [r for r in resources if r.is_text_format and (str(getattr(r, 'mime_type', '')).startswith('text') and (str(getattr(r, 'mime_type','')).endswith('markdown') or str(r.name).lower().endswith('.md') or str(getattr(r, 'mime_type','')).endswith('plain')))]\n        if not mds:\n            return 0.0\n        mds.sort(key=lambda r: r.size_bytes, reverse=True)\n        md = mds[0]\n        content = md.load_text()\n        lower = content.lower()\n        # Risk factors presence\n        factors = [r\"tenure\", r\"spend\", r\"support(\\s*ticket)?\", r\"usage\"]\n        factor_hits = 0\n        for f in factors:\n            if re.search(f, lower):\n                factor_hits += 1\n        factors_score = factor_hits / len(factors)\n        # Risk scoring formula and weights\n        has_risk_scoring = re.search(r\"\\brisk\\s*scor(ing|e)\\b\", lower) is not None\n        has_weight_word = re.search(r\"\\bweight(ed|s|ing)?\\b\", lower) is not None\n        percent_matches = re.findall(r\"\\b\\d{1,2}(?:\\.\\d+)?\\s*%\\b\", content)\n        decimal_matches = re.findall(r\"(?<!\\d)(?:0?\\.\\d+|1\\.0)\\b\", content)\n        has_two_numbers = (len(percent_matches) + len(decimal_matches)) >= 2\n        formula_score = (int(has_risk_scoring) + int(has_weight_word) + int(has_two_numbers)) / 3.0\n        return float((factors_score + formula_score) / 2.0)\n    except Exception:\n        return 0.0\n
